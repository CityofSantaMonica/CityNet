// Bootstrap Mid-Small - col-ms-*
//
// This is a hack to fill the gap between 480 and 760 pixels - a missing range
// in bootstrap.  Use these classes to style pages on cellphones when they
// transition from portrait to landscape.
//
// ===========================================================================
//
// In order for this to work in SASS, you **must** declare these two variables
// **before** you import Bootstrap.
//
// ```
//   $screen-ms-min: 480px;
//   $screen-xs-max: ($screen-ms-min - 1);
// ```
//

// We need to define new widths to fill up the gaps
$screen-ms-max: ($screen-sm-min - 1);


// Create the Mid-Small column classes. We need to make it manually since Bootstrap
// doesn't support us
//
// See make-grid-columns() in bootstrap/mixins/_grid-framework.less
.col-ms-1,
.col-ms-2,
.col-ms-3,
.col-ms-4,
.col-ms-5,
.col-ms-6,
.col-ms-7,
.col-ms-8,
.col-ms-9,
.col-ms-10,
.col-ms-11,
.col-ms-12 {
    position: relative;
    // Prevent columns from collapsing when empty
    min-height: 1px;
    // Inner gutter via padding
    padding-left: ($grid-gutter-width / 2);
    padding-right: ($grid-gutter-width / 2);
}


// LESS mixins for Mid-Small columns to be used in LESS
@mixin make-ms-column($columns, $gutter: $grid-gutter-width) {
  position: relative;
  min-height: 1px;
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);

  @media (min-width: $screen-ms-min) {
    float: left;
    width: percentage(($columns / $grid-columns));
  }
}
@mixin make-ms-column-offset($columns) {
  @media (min-width: $screen-ms-min) {
    margin-left: percentage(($columns / $grid-columns));
  }
}
@mixin make-ms-column-push($columns) {
  @media (min-width: $screen-ms-min) {
    left: percentage(($columns / $grid-columns));
  }
}
@mixin make-ms-column-pull($columns) {
  @media (min-width: $screen-ms-min) {
    right: percentage(($columns / $grid-columns));
  }
}


// Class adjustments to support Mid-Small columns
@media (min-width: $screen-ms-min) and (max-width: $screen-ms-max) {
    .container {
        max-width: $screen-sm - 20px;
    }
    .hidden-xs {
        display: block !important;
    }
}


// Use Bootstrap to make all of the appropriate classes
@media (min-width: $screen-ms-min) and (max-width: $screen-ms-max) {
    @include make-grid(ms);
}


// Visibility utilities
.visible-xs, .visible-ms {
    // set to no display so we have a fresh start
    display: none !important;
}

.visible-xs-block,
.visible-xs-inline,
.visible-xs-inline-block,
.visible-ms-block,
.visible-ms-inline,
.visible-ms-inline-block {
    display: none !important;
}

@media (max-width: $screen-xs-max) {
    @include responsive-visibility('.visible-xs');
}
.visible-xs-block {
    @media (max-width: $screen-xs-max) {
        display: block !important;
    }
}
.visible-xs-inline {
    @media (max-width: $screen-xs-max) {
        display: inline !important;
    }
}
.visible-xs-inline-block {
    @media (max-width: $screen-xs-max) {
        display: inline-block !important;
    }
}

@media (min-width: $screen-ms-min) and (max-width: $screen-ms-max) {
    @include responsive-visibility('.visible-ms');
}
.visible-ms-block {
    @media (min-width: $screen-ms-min) and (max-width: $screen-ms-max) {
        display: block !important;
    }
}
.visible-ms-inline {
    @media (min-width: $screen-ms-min) and (max-width: $screen-ms-max) {
        display: inline !important;
    }
}
.visible-ms-inline-block {
    @media (min-width: $screen-ms-min) and (max-width: $screen-ms-max) {
        display: inline-block !important;
    }
}

@media (max-width: $screen-xs-max) {
    @include responsive-invisibility('.hidden-xs');
}

@media (min-width: $screen-ms-min) and (max-width: $screen-ms-max) {
    @include responsive-invisibility('.hidden-ms');
}